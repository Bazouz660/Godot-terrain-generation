[gd_scene load_steps=30 format=3 uid="uid://7v6h1jsruxl1"]

[ext_resource type="Environment" uid="uid://csud4iprrfqkn" path="res://env.tres" id="1_3p3qi"]
[ext_resource type="PackedScene" uid="uid://ckxawl6bb6dvj" path="res://acacia_tree.tscn" id="2_fdeh7"]
[ext_resource type="Material" uid="uid://ctxs8wxn1f1qy" path="res://sand.tres" id="4_gd4bo"]
[ext_resource type="Texture2D" uid="uid://b55n7morbqfb6" path="res://addons/kenney_prototype_textures/dark/texture_02.png" id="4_kunpr"]
[ext_resource type="Script" uid="uid://3v4h4sttwutf" path="res://camera.gd" id="5_kunpr"]
[ext_resource type="PackedScene" uid="uid://bel1453ay4w38" path="res://penis.glb" id="6_sblak"]
[ext_resource type="Script" uid="uid://be7ib8djs5n4e" path="res://camera_pivot.gd" id="7_ontx2"]
[ext_resource type="PackedScene" uid="uid://b8mhr6qqbo0kv" path="res://house.glb" id="9_fg31h"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_kunpr"]
no_depth_test = true
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="PrismMesh" id="PrismMesh_kunpr"]

[sub_resource type="Shader" id="Shader_ontx2"]
code = "shader_type spatial;
render_mode cull_back, shadows_disabled, depth_draw_always;

// Water Color
uniform vec4 color : source_color;
uniform vec4 deep_water_color : source_color;
uniform float roughness : hint_range(0.0, 1.0) = 0.1;
uniform float metallic : hint_range(0.0, 1.0) = 0;

// Water Speed
uniform float speed : hint_range(-1, 1) = 0.02;

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap, repeat_disable;
uniform sampler2D REFLECTION_TEXTURE : source_color, filter_nearest_mipmap;

// Depth fade parameters
uniform float depth_fade_distance : hint_range(0.0, 10.0) = 4.0;
uniform float depth_fade_power : hint_range(0.1, 5.0) = 1.0;

// Water foam
uniform vec4 edge_color : source_color;
uniform float edge_scale : hint_range(0.0, 1.0) = 0.1;
uniform float near = 0.1;
uniform float far = 100.0;

// Water Wave
uniform float time_scale : hint_range(0.0, 0.2, 0.005) = 0.025;
uniform float height_scale = 0.15;
uniform float noise_scale = 10.0;

// Refraction parameters
uniform float refraction_strength : hint_range(0.0, 1.0) = 0.2;
uniform float refraction_depth_multiplier : hint_range(0.0, 10.0) = 2.0;

// Water Noise
uniform sampler2D wave;
uniform sampler2D normalmap : hint_normal;
uniform sampler2D normalmap2 : hint_normal;

// Varying variables
varying float height;
varying vec3 world_pos;
varying vec3 world_normal;
varying vec3 vertex_pos;

// Triplanar blend sharpness
const float TRIPLANAR_SHARPNESS = 4.0;

float fresnel(float amount, vec3 normal, vec3 view) {
    return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0)), amount);
}

float linearize_depth(float depth) {
    depth = 1.0 - 2.0 * depth;
    return (2.0 * near * far) / (far + near - depth * (far - near));
}

float calculate_depth_fade(float depth_difference) {
    return clamp(exp(-depth_difference * depth_fade_power / depth_fade_distance), 0.0, 1.0);
}

vec3 get_triplanar_weights(vec3 normal) {
    vec3 blend_weights = abs(normal);
    blend_weights = pow(blend_weights, vec3(TRIPLANAR_SHARPNESS));
    blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z);
    return blend_weights;
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos, float time_offset) {
    vec4 samp = vec4(0.0);
    p_triplanar_pos /= noise_scale;

    samp += texture(p_sampler, p_triplanar_pos.xy + vec2(time_offset)) * p_weights.z;
    samp += texture(p_sampler, p_triplanar_pos.xz + vec2(time_offset)) * p_weights.y;
    samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0) + vec2(time_offset)) * p_weights.x;

    return samp;
}

// Modified to sample multiple points for smooth transitions
vec4 sample_screen_texture(vec2 uv, float depth_difference) {
    vec2 texel_size = vec2(1.0) / vec2(textureSize(SCREEN_TEXTURE, 0));

    // Sample multiple points around the current pixel
    vec4 _color = textureLod(SCREEN_TEXTURE, uv, 0.0);
    vec4 color_up = textureLod(SCREEN_TEXTURE, uv + vec2(0.0, texel_size.y), 0.0);
    vec4 color_down = textureLod(SCREEN_TEXTURE, uv + vec2(0.0, -texel_size.y), 0.0);
    vec4 color_left = textureLod(SCREEN_TEXTURE, uv + vec2(-texel_size.x, 0.0), 0.0);
    vec4 color_right = textureLod(SCREEN_TEXTURE, uv + vec2(texel_size.x, 0.0), 0.0);

    // Calculate weights based on depth difference
    float blend_weight = smoothstep(0.0, 0.01, abs(depth_difference));

    // Blend between center sample and average of neighbors
    vec4 avg_color = (color_up + color_down + color_left + color_right) / 4.0;
    return mix(_color, avg_color, blend_weight * 0.5);
}

void vertex() {
    world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
    world_normal = normalize((MODEL_MATRIX * vec4(NORMAL, 0.0)).xyz);
    vertex_pos = VERTEX;

    vec3 blend_weights = get_triplanar_weights(world_normal);
    height = triplanar_texture(wave, blend_weights, world_pos, TIME * time_scale).r;

    VERTEX.y += height * height_scale;
}

void fragment() {
    float time = TIME * speed;
    vec3 blend_weights = get_triplanar_weights(world_normal);

    // Sample and blend normal maps
    vec4 normal1 = triplanar_texture(normalmap, blend_weights, world_pos, time * 4.0);
    vec4 normal2 = triplanar_texture(normalmap2, blend_weights, world_pos, -time * 3.0);
    vec4 normal3 = triplanar_texture(normalmap, blend_weights, world_pos, -time);

    vec3 combined_normal = mix(mix(normal1.rgb, normal2.rgb, 0.5), normal3.rgb, 0.5);
    NORMAL_MAP = combined_normal;

    vec3 normal_screen_space = normalize(combined_normal * 2.0 - 1.0);
    vec2 ref_offset = normal_screen_space.xy * refraction_strength;

    float scene_depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
    float water_depth = FRAGCOORD.z;

    float scene_depth_linear = linearize_depth(scene_depth);
    float water_depth_linear = linearize_depth(water_depth);
    float depth_difference = scene_depth_linear - water_depth_linear;

	ref_offset *= (scene_depth + water_depth) * refraction_depth_multiplier;

    vec2 refracted_uv = SCREEN_UV + ref_offset;

    // Recalculate depth at refracted position with smooth transition
    float refracted_scene_depth = texture(DEPTH_TEXTURE, refracted_uv).r;
    float refracted_scene_depth_linear = linearize_depth(refracted_scene_depth);
    depth_difference = refracted_scene_depth_linear - water_depth_linear;

    if (depth_difference < 0.0001) {
        refracted_uv = SCREEN_UV;
        scene_depth = texture(DEPTH_TEXTURE, refracted_uv).r;
        scene_depth_linear = linearize_depth(scene_depth);
        depth_difference = scene_depth_linear - water_depth_linear;
    }

    float visibility = calculate_depth_fade(depth_difference);
    float edge_factor = 1.0 - step(edge_scale, abs(depth_difference * 10.0));

    vec4 water_color = mix(deep_water_color, color, visibility);
    vec4 depth_color_adj = mix(water_color, edge_color, edge_factor);

    // Use the new sampling function for smoother transitions
    vec4 refracted_color = sample_screen_texture(refracted_uv, depth_difference);

    float fresnel_factor = fresnel(3.0, combined_normal, VIEW);

    vec3 final_color = mix(refracted_color.rgb, depth_color_adj.rgb, max(0.3, fresnel_factor * 0.7));
    final_color = mix(deep_water_color.rgb, final_color, visibility);

	vec4 reflection_color = texture(REFLECTION_TEXTURE, vec2(UV.x, 1.0 - UV.y));

	if (reflection_color.a == 1.0) {
		final_color = mix(final_color, reflection_color.rgb, 0.5);
	}

    ALBEDO = final_color;
    METALLIC = metallic;
    ROUGHNESS = roughness;
}"

[sub_resource type="ViewportTexture" id="ViewportTexture_ontx2"]
viewport_path = NodePath("SubViewport")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_fg31h"]
seed = 70
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_tcyo4"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_fg31h")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_5u450"]
seed = 55
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_fsxk6"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_5u450")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1qf55"]
noise_type = 3
frequency = 0.0344
fractal_octaves = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_0o1e6"]
seamless = true
noise = SubResource("FastNoiseLite_1qf55")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5ycv0"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_ontx2")
shader_parameter/color = Color(0, 0.396078, 0.54902, 0.572549)
shader_parameter/deep_water_color = Color(0, 0.411765, 0.560784, 1)
shader_parameter/roughness = 0.1
shader_parameter/metallic = 0.0
shader_parameter/speed = 0.00500005
shader_parameter/REFLECTION_TEXTURE = SubResource("ViewportTexture_ontx2")
shader_parameter/depth_fade_distance = 0.001
shader_parameter/depth_fade_power = 1.058
shader_parameter/edge_color = Color(1, 1, 1, 1)
shader_parameter/edge_scale = 0.001
shader_parameter/near = 0.116
shader_parameter/far = 200.0
shader_parameter/time_scale = 0.025
shader_parameter/height_scale = 0.15
shader_parameter/noise_scale = 20.0
shader_parameter/refraction_strength = 0.029
shader_parameter/refraction_depth_multiplier = 0.635
shader_parameter/wave = SubResource("NoiseTexture2D_0o1e6")
shader_parameter/normalmap = SubResource("NoiseTexture2D_tcyo4")
shader_parameter/normalmap2 = SubResource("NoiseTexture2D_fsxk6")

[sub_resource type="PlaneMesh" id="PlaneMesh_kunpr"]
size = Vector2(40, 40)
subdivide_width = 60
subdivide_depth = 60

[sub_resource type="ViewportTexture" id="ViewportTexture_3p3qi"]
viewport_path = NodePath("SubViewport")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_fdeh7"]
resource_local_to_scene = true
albedo_texture = SubResource("ViewportTexture_3p3qi")

[sub_resource type="PlaneMesh" id="PlaneMesh_c6hqg"]

[sub_resource type="PlaneMesh" id="PlaneMesh_ontx2"]
size = Vector2(20, 20)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_d6p6h"]
albedo_texture = ExtResource("4_kunpr")
uv1_triplanar = true
uv1_world_triplanar = true

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_c6hqg"]
albedo_color = Color(0.821551, 0.000143791, 0.0198053, 1)

[sub_resource type="SphereMesh" id="SphereMesh_fdeh7"]

[sub_resource type="SphereShape3D" id="SphereShape3D_fdeh7"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_gd4bo"]

[node name="Node3D" type="Node3D"]

[node name="SubViewport" type="SubViewport" parent="."]
transparent_bg = true
mesh_lod_threshold = 0.0
anisotropic_filtering_level = 0
canvas_item_default_texture_filter = 0
size = Vector2i(1024, 1024)
render_target_clear_mode = 1

[node name="Node3D" type="Node3D" parent="SubViewport"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, -0.98971, 0)

[node name="ReflectionCamera" type="Camera3D" parent="SubViewport/Node3D"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -5.91816e-08, -1.35392)
environment = ExtResource("1_3p3qi")
projection = 1
current = true
size = 40.0
near = 0.116
far = 50.0

[node name="VisualizationMesh" type="MeshInstance3D" parent="SubViewport/Node3D/ReflectionCamera"]
unique_name_in_owner = true
transform = Transform3D(1, -4.37114e-08, 0, 8.35189e-23, 1.91069e-15, 1, -4.37114e-08, -1, 1.91069e-15, -1.16832, 3.26347, -6.39221)
material_override = SubResource("StandardMaterial3D_kunpr")
mesh = SubResource("PrismMesh_kunpr")
skeleton = NodePath("../../../../MeshInstance3D3")

[node name="WaterPlane" type="MeshInstance3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.08155, 0.0219562)
material_override = SubResource("ShaderMaterial_5ycv0")
mesh = SubResource("PlaneMesh_kunpr")

[node name="Acacia Tree" parent="." instance=ExtResource("2_fdeh7")]
transform = Transform3D(-0.0284779, 0, 0.539249, 0, 0.54, 0, -0.539249, 0, -0.0284779, -10.2176, 1.65729, 0.255365)

[node name="Acacia Tree2" parent="." instance=ExtResource("2_fdeh7")]
transform = Transform3D(-0.478576, 0.051494, 0.244773, 0.0458456, 0.537539, -0.0234482, -0.245894, 0, -0.480766, -10.1484, 1.47993, 4.39207)

[node name="Acacia Tree4" parent="." instance=ExtResource("2_fdeh7")]
transform = Transform3D(0.0501977, 0.0191574, 0.53732, -0.073504, 0.534835, -0.0122019, -0.532614, -0.072005, 0.0523252, -5.56403, 1.54806, 10.1949)

[node name="Acacia Tree3" parent="." instance=ExtResource("2_fdeh7")]
transform = Transform3D(-0.478576, 0.051494, 0.244773, 0.0458456, 0.537539, -0.0234482, -0.245894, 0, -0.480766, -10.2337, 1.58976, 2.48533)

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5.09705, -16.2607)
material_overlay = SubResource("StandardMaterial3D_fdeh7")
mesh = SubResource("PlaneMesh_c6hqg")

[node name="CSGBakedMeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.015, 0, 0, 0, 1, -0.468079, 0.147465, 0.367189)
material_override = ExtResource("4_gd4bo")
mesh = SubResource("PlaneMesh_ontx2")

[node name="CSGBox3D2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -12.9371, 0.8311, 0.522381)
material_overlay = SubResource("StandardMaterial3D_d6p6h")
use_collision = true
size = Vector3(5.94724, 1.34082, 26.1745)

[node name="CSGBox3D3" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 12.184, 0.782639, 0.522381)
material_overlay = SubResource("StandardMaterial3D_d6p6h")
use_collision = true
size = Vector3(5.94724, 1.2439, 26.1745)

[node name="CSGBox3D4" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.737824, 0.782639, 11.7675)
material_overlay = SubResource("StandardMaterial3D_d6p6h")
use_collision = true
size = Vector3(20.5768, 1.2439, 3.68418)

[node name="CSGBox3D5" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.737824, 0.782639, -10.7708)
material_overlay = SubResource("StandardMaterial3D_d6p6h")
use_collision = true
size = Vector3(20.5768, 1.2439, 3.68418)

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.714262, 0.150183, -0.683575, 0.515063, 0.548487, 0.658689, 0.473856, -0.822561, 0.314409, 0, 9.15536, 0)
shadow_enabled = true

[node name="MultiMeshInstance3D" type="MultiMeshInstance3D" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource("1_3p3qi")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -7.82021, 1.14792, 4.56478)
material_override = SubResource("StandardMaterial3D_c6hqg")
mesh = SubResource("SphereMesh_fdeh7")

[node name="CharacterBody3D" type="CharacterBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 10.9725, 2.63845, 0)
script = ExtResource("5_kunpr")

[node name="CameraPivot" type="Marker3D" parent="CharacterBody3D"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 0.818561, 0.57442, 0, -0.57442, 0.818561, 0, 0, 0)
script = ExtResource("7_ontx2")

[node name="MainCamera" type="Camera3D" parent="CharacterBody3D/CameraPivot"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 20)
projection = 1
current = true
size = 10.815
near = 0.001
far = 200.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="CharacterBody3D"]
shape = SubResource("SphereShape3D_fdeh7")
disabled = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="CharacterBody3D"]
mesh = SubResource("CapsuleMesh_gd4bo")

[node name="Sketchfab_Scene" parent="." instance=ExtResource("6_sblak")]
transform = Transform3D(4.44724, 0, 2.28518, 0, 5, 0, -2.28518, 0, 4.44724, -10.452, 1.51077, -5.50476)

[node name="house" parent="." instance=ExtResource("9_fg31h")]
transform = Transform3D(-0.0429742, 0, 0.999076, 0, 1, 0, -0.999076, 0, -0.0429742, 0.338903, 1.40459, 11.6509)

[node name="test" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, -0.35, -1150.99, 0.49995)
fov = 1.0
